package Servlets;

import business.Invoice;
import business.Item;
import business.ItemDB;
import business.ItemList;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 *
 * @author wmscottsimpsonjr
 */
public class CartServlet extends HttpServlet {

    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        String URL = "/cart.jsp", msg="";
        Invoice invoice = new Invoice();
        List<Item> allitems;
        List<Item> orderitems = new ArrayList<Item>();//May not need this. notice that it's filled a few times.
        List<ItemList> cart = new ArrayList<ItemList>();
        String[] itemIDs;
        String[] itemQs;
        Date pickuptime = null;
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm");
        String readynow;
        double total = 0.0;
        
        //check to see if cart has anything already (ie "add more" was clicked, also works if using back button).
        //Can duplicate an item if the user does so and selects an item they've already added. 
        //Maybe put check before adding item to cart in the else within the next try, and if its already there increase quantity
        //or could not display item on order.jsp if it's already in cart. probably the former option
        try {
            List<ItemList> ill = (List<ItemList>) request.getSession().getAttribute("cart");
            if (ill!=null && ill.size()>0){
                cart = ill;
            }
        } catch (Exception e) {
            msg += "Cart read error. " + e.getMessage();
        }
        
        //grab total if it exists, otherwise doesn't count items added before clicking "add more" / going back
        try {
            total = (Double) request.getSession().getAttribute("total");
        } catch (Exception e) {
            //there was no total
        }
        
        
        if (request.getParameter("viewcart") != null) {

            //really should set items now, then all other invoice info upon submit
            //upon submit, compare current time plus 20 to requested time

            try {
                allitems = (List<Item>) request.getSession().getAttribute("items");
                itemIDs = request.getParameterValues("itemID");
                if (itemIDs==null) {
                    msg = "No items selected";
                    URL="/order.jsp";
                } else {
                    for(int i = 0; i < itemIDs.length; i++){
                        //orderitems.add(ItemDB.getItemByID(itemIDs[i])); replaced with inner loop instead of having to grab from db again:
                        for (Item item : allitems) {
                            if (item.getItemID() == Integer.parseInt((itemIDs[i]))) {
                                //msg += "found item: " + item.getName() +". ";
                                orderitems.add(item);

                                int q = Integer.parseInt(request.getParameter(itemIDs[i]));
                                ItemList il = new ItemList();
                                il.setItemID(Integer.parseInt(itemIDs[i]));
                                il.setQuantity(q);
                                il.setItem(item);
                                //don't se orderID, that's done once the orderID is automatically generated by DB upon submission
                                cart.add(il);
                                total += q*item.getPrice();
                                
                            }
                        }
                    }
                    request.getSession().setAttribute("cart", cart);
                    request.getSession().setAttribute("total", total);
                    request.getSession().setAttribute("orderitems", orderitems);
                }
            } catch (NumberFormatException e) {
                msg = "Please enter a number for quantity. " + e.getMessage() + ". Items with valid quantities were succesfully added to cart";
                URL = "/order.jsp";
            } catch (Exception e) {
                msg = "item error " + e.getMessage();
            }



                    try{

            } catch (Exception e) {
                msg = "Ready time error: " + e.getMessage();
            }
            try {
                readynow = String.valueOf(request.getSession().getAttribute("readynow"));
                if (readynow.equals("later")) {
                    try {

                        pickuptime = formatter.parse(request.getParameter("pickuptime"));
                        //pickuptime = formatter.parse(request.getParameter("pickuptime")+":00");

                        //check that selected time is between noon and 830 pm. Also need to check that it's far enough in the future, and not on a sunday
                        String pattern = "HH:mm";
                        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);
                        Date startTime = null;
                        Date endTime = null;
                        boolean isValidTime = true;

                        try {
                        startTime = simpleDateFormat.parse("12:00");
                        endTime = simpleDateFormat.parse("20:30");
                        int test = 1;

                        } catch (Exception e) {
                            msg += "Could not set date range " +e.getMessage() + "<br>";
                        }
                        if (startTime != null && endTime != null) {
                            if (pickuptime.before(startTime) || pickuptime.after(endTime)) {

                                isValidTime = false;
                            } else {
                                isValidTime = true;
                            }
                        }

                        if (!isValidTime) {
                            URL = "/order.jsp";
                            msg = "Please select a time within range";
                        }
                        //String rt = String.valueOf(request.getSession().getAttribute("readytime"));
                        //readytime = formatter.parse(rt);
                        //readytime = formatter.parse(request.getSession().getAttribute("pickuptime"));
                        //request.getSession().setAttribute("readytime",readytime);
                        invoice.setPickupdate(pickuptime);
                        request.getSession().setAttribute("invoice",invoice);
                        request.getSession().setAttribute("pickuptime",pickuptime);

                    } catch (Exception e) {
                        msg = "Date error: " + e.getMessage();
                    }



                } else {
                    //really shouldn't set time until submit? Maybe just change upon submit if it's less than 25 minutes away
                    //also needs to check against noon-830pm limitation and sunday limitation
                    Date currenttime = new Date();
                    Calendar cal = Calendar.getInstance();
                    cal.setTime(currenttime);
                    cal.add(Calendar.MINUTE, 30);
    //                String rt;
    //                rt = formatter.format(cal.getTime());
    //                pickuptime = formatter.parse(rt);
                    pickuptime = cal.getTime();
                    String pickupformat = formatter.format(pickuptime);
                    invoice.setPickupdate(pickuptime);
                    request.getSession().setAttribute("pickuptime",pickupformat);
                    request.getSession().setAttribute("invoice",invoice);
                }
            } catch (Exception e) {
                msg = "Pickup time error: " + e.getMessage();
            }
        }
        
        
        if (request.getParameter("back") != null) {
            URL = "/order.jsp";
        }
        
        
        if (request.getParameter("update") != null) {
            total = 0.0;
            try {
                allitems = (List<Item>) request.getSession().getAttribute("items");
                itemIDs = request.getParameterValues("itemID");
                List<ItemList> newcart = new ArrayList<ItemList>();
                for(int i = 0; i < itemIDs.length; i++){
                    for (Item item : allitems) {
                        if (item.getItemID() == Integer.parseInt((itemIDs[i]))) {

                            int q = Integer.parseInt(request.getParameter(itemIDs[i]));
                            if (q != 0) {
                                orderitems.add(item);
                                ItemList il = new ItemList();
                                il.setItemID(Integer.parseInt(itemIDs[i]));
                                il.setQuantity(q);
                                il.setItem(item);
                                newcart.add(il);
                                total += q*item.getPrice();
                            }
                        }
                    }
                }
                request.getSession().setAttribute("cart", newcart);
                request.getSession().setAttribute("total", total);
                request.getSession().setAttribute("orderitems", orderitems);
            } catch (Exception e) {
                msg +="Cart update error: " + e.getMessage();
            }
            
        }
        
        
        if (request.getParameter("checkout") != null) {
            URL ="/checkout.jsp";
            
        }

        request.setAttribute("msg", msg);
        RequestDispatcher disp = getServletContext().getRequestDispatcher(URL);
        disp.forward(request, response);
    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

}
